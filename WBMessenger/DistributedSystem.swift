//
//  DistributedSystem.swift
//  WBMessenger
//
//  Created by Tatiana Lazarenko on 8/1/24.
//

import SwiftUI
import Combine

final class SuperTask {
    let id: UUID
    let description: String
    
    init(description: String) {
        self.id = UUID()
        self.description = description
    }
}

enum ProcessError: Error {
    case taskFailed(String)
}

final class Client: ObservableObject {
    let id: UUID
    var system: System?
    
    init() {
        self.id = UUID()
    }
    
    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    func process(task: SuperTask) async throws -> String {
        // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10% –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        let isError = Int.random(in: 1...10) == 1
            
        if isError {
            throw ProcessError.taskFailed("‚ùóÔ∏è–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: \(task.description)")
        }
            
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫—É–Ω–¥–∞
        try await Task.sleep(nanoseconds: 1_000_000_000)
        
        return "‚úÖ –ö–ª–∏–µ–Ω—Ç \(id.uuidString.prefix(4)) –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–¥–∞—á—É: \(task.description)"
    }
}

final class System: ObservableObject {
    @Published private(set) var clients: [Client] = []
    
    func addClient(_ client: Client) {
        clients.append(client)
        print("üë§ –ö–ª–∏–µ–Ω—Ç \(client.id.uuidString.prefix(4)) –¥–æ–±–∞–≤–ª–µ–Ω")
    }
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏
    func distributeTasks(tasks: [SuperTask]) async {
        for (index, task) in tasks.enumerated() {
            let clientIndex = index % clients.count
            let client = clients[clientIndex]
            await attemptTaskProcessing(client: client, task: task, retryCount: 3)
        }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    private func attemptTaskProcessing(client: Client, task: SuperTask, retryCount: Int) async {
        var attempts = 0
        var success = false
        
        while attempts < retryCount && !success {
            attempts += 1
            do {
                let result = try await client.process(task: task)
                print(result)
                success = true
            } catch {
                print("üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: \(error). –ü–æ–ø—ã—Ç–∫–∞ \(attempts) –∏–∑ \(retryCount)...")
                if attempts == retryCount {
                    print("üò≠ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: \(task.description)")
                }
            }
        }
    }
}

